-- Lua and C like syntax

-- Constants
-- true - 1
-- false - 0
-- FFCNST_PRG_SIZE - the size of the program in u8s, dependent on compile settings

-- Constant Defs
-- FFDEF_PLATFORM - the platform being compiled to. Is string "x86" for x86

-- Hex values are converted to regular numbers at compile time

-- Compile options
-- #suppress code - suppress a warning. replace code with option below
-- -- size_overflow - warning when something you input doesn't fit. see below
-- -- -- u8 var = 565 (number too big) 
-- -- -- u8[2] var = {12,43,42} (too many values)

-- Variables
-- Variables can have letters of any case, numbers and hyphens. They cannot start with numbers.
-- Variables cannot start with "FFCNST_" as this is reserved only for special constants 
-- Variable 'tEst1' is accurate but not 'a+b-c' nor '123abc'
-- They are case-sensitive, meaning variable 'test' and variable 'Test' are different

-- Initializing a variable with just '=' will be put wherever the compiler decides is fit
u8 u8Var1 = 10 -- Number taking up a byte
u16 u16Var1 = 312 -- Number taking up a u16 (2 bytes, 16-bits)
u32 u32Var1 = 3746926745 -- Number taking up a u32 (4 bytes, 32-bits)
u64 u64Var1 = 842729494831 -- Number taking up a u64 (8 bytes, 64-bits)
-- You can initialize a variable at an address with '>'
u8 u8Var2 > 0xB000 = 1
-- You can use variables here, however its location will not change if the variable changes
-- The value of the variable is taken as the address
u8 u8Var3 > u8Var1 = 0
-- Address of u8Var3 is 10 or 0xA
u8 Var1 = 11
-- Address of u8Var3 is still 10, not 11 or 0xB

-- Not setting a variable name with '>' implies that you want to just modify or get at that address
u8 > 0xC000 = 98
-- If you use a variable, the value of the variable will be used as a pointer
u8 > u8Var1 = 98
-- You can get the address of a variable like this
u16Var1 = >>u8Var1
-- This means you can dereference like this
u16Var1 = u8 > >>u8Var2
u16Var2 = u8 >>> u8var2 -- This also works

-- You can increment/decrement a variable like this
u16Var1+= -- Increment by 1
u16Var1-= -- Decrement by 1
u16Var1+= 5 -- Increment by 5
u16Var1-= 5 -- Decrement by 5


-- You can get a pointer to a value by putting '*' in front
u64 pointerVal = >>u8Var2
-- You can declare something as an array by tagging [] onto it. Works for u8, u16, u32, and u64
u8[] u8Array1 = {10,20,30,40,50}
u16[] u16Array1 = {1372,257,890,102}
u32[] u32Array = {4628916312,9462754714}
u64[] u64Array = {1471395,1241052,123694}
-- These will by default be size of set values (4 values in a u8 array means 4 u8s allocated)
-- You can set the specific size of the array by putting a number in []
u8[32] u8Array2 = {50,40,30,20,10} -- 32 u8s
u16[32] u16Array2 = {982,742,164,473} -- 32 u16s, 64 u8s
-- You can put characters into arrays
u8[] charArray = "Hello, chars!" -- Note, there is no null u8 at the end
-- Strings are slightly different than u8 arrays as they add a null u8 automatically.
-- Otherwise, they are identical
string stringVar1 = "Hello, world!" -- is actually "Hello, world!\0"
-- Here shows the difference between them
u8[] notAString = "String" -- is actually "String"
string isAString = "String" -- is actually "String\0"
-- You can also tag on a [] but do be aware you need to leave room for the null u8
string[6] helloString = "hello" -- 6 u8s in total 'h','e','l','l','o','\0'
-- string[5] helloString = "hello" -- would cause a size_overflow warning

-- Conditionals
-- Code will run inside of a conditional statement as long as the value isn't 0 if no operand is present
if true then
    -- This if statement will always execute the code here
end
if false then
    -- This if statement will never execute the code here
end
-- Parentheses are optional, and if you use them no spaces are needed between keyu16s
if(true)then
    -- This is valid
end
if (true) then
    -- So is this
end

-- You can use variables in an if statement (obviously)
if u8Var2 then -- u8Var2 is 1, so it's true
    -- This code will run
end
if u8Var2 then -- u8Var3 is 0, so it is false
    -- This code will NOT run
end
if u8Var1 then -- u8Var1 is 11, so it's true as it's not 0
    -- This code will run
end

-- Comparisons are as follows
-- val1 == val2 - run if equal
-- val1 != val2 - run if not equal
-- val1 > val2 - run if val1 is greater than val2
-- val1 < val2 - run if val1 is less than val2
-- val1 >= val2 - run if val1 is greater than or equal to val2
-- val1 <= val2 - run if val1 is less than or equal to val2

-- Bool operations are as follows
-- not val - returns opposite bool result of val1
-- val1 or val2 - returns true if either val1 or val2 is true
-- val1 and val2 - returns true if both val1 and val2 is true

-- not takes highest priority and computes first, then or+and
-- not true or false - (not true) or false - false or false - false
-- not false or true - (not false) or true - true or true - true

if true == true then
    -- This code will run
end
if u8Val1 == u8Val2 then -- u8Val1 is 11 and u8Val2 is 0. They are not equal
    -- This code will not run as they must be equal
end
if u8Val1 != u8Val2 then -- u8Val1 is 11 and u8Val2 is 0. They are not equal
    -- This code will run as they are not equal
end
if u8Val1 > u8Val2 then -- u8Val1 is 11 and u8Val2 is 0. val1 is greater than val2
    -- This code will run as val1 is greater than val2
end
if u8Val1 < u8Val2 then -- u8Val1 is 11 and u8Val2 is 0. val1 is not greater than val2
    -- This code will not run as val1 must be less than val2
end
if true or false then -- true is true, so false will not be checked
    -- This code will run
end
if false or true then -- false is false, so true will be checked. It is true so the code will be ran.
    -- This code will run
end
if false or false or true -- These are checked sequentially
    -- This code will run
end
if true and false -- true is true, checking next. false is false, don't run code.
    -- This code will not run
end
if true and true -- true is true, checking next. true is true, run code.
    -- This code will run
end
if true and true and true -- Same as before, these are checked sequentially
    -- This code will run
end

while true do -- Condition is checked BEFORE executing, not after!

end

u16 i

for i=0,10 do

end

function exampleFunction()

end